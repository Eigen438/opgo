// MIT License
//
// Copyright (c) 2025 Eigen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: oppb/v1/provider_service.proto

package oppbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Eigen438/opgo/pkg/auto-generated/oppb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "oppb.v1.ProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProviderServiceDiscoveryProcedure is the fully-qualified name of the ProviderService's Discovery
	// RPC.
	ProviderServiceDiscoveryProcedure = "/oppb.v1.ProviderService/Discovery"
	// ProviderServiceJwksProcedure is the fully-qualified name of the ProviderService's Jwks RPC.
	ProviderServiceJwksProcedure = "/oppb.v1.ProviderService/Jwks"
	// ProviderServiceAuthorizationProcedure is the fully-qualified name of the ProviderService's
	// Authorization RPC.
	ProviderServiceAuthorizationProcedure = "/oppb.v1.ProviderService/Authorization"
	// ProviderServiceAuthorizationIssueProcedure is the fully-qualified name of the ProviderService's
	// AuthorizationIssue RPC.
	ProviderServiceAuthorizationIssueProcedure = "/oppb.v1.ProviderService/AuthorizationIssue"
	// ProviderServiceAuthorizationCancelProcedure is the fully-qualified name of the ProviderService's
	// AuthorizationCancel RPC.
	ProviderServiceAuthorizationCancelProcedure = "/oppb.v1.ProviderService/AuthorizationCancel"
	// ProviderServiceStartSessionProcedure is the fully-qualified name of the ProviderService's
	// StartSession RPC.
	ProviderServiceStartSessionProcedure = "/oppb.v1.ProviderService/StartSession"
	// ProviderServiceTokenProcedure is the fully-qualified name of the ProviderService's Token RPC.
	ProviderServiceTokenProcedure = "/oppb.v1.ProviderService/Token"
	// ProviderServiceUserinfoProcedure is the fully-qualified name of the ProviderService's Userinfo
	// RPC.
	ProviderServiceUserinfoProcedure = "/oppb.v1.ProviderService/Userinfo"
	// ProviderServiceRequestProcedure is the fully-qualified name of the ProviderService's Request RPC.
	ProviderServiceRequestProcedure = "/oppb.v1.ProviderService/Request"
	// ProviderServiceRegistrationCreateProcedure is the fully-qualified name of the ProviderService's
	// RegistrationCreate RPC.
	ProviderServiceRegistrationCreateProcedure = "/oppb.v1.ProviderService/RegistrationCreate"
	// ProviderServiceRegistrationDeleteProcedure is the fully-qualified name of the ProviderService's
	// RegistrationDelete RPC.
	ProviderServiceRegistrationDeleteProcedure = "/oppb.v1.ProviderService/RegistrationDelete"
	// ProviderServiceRegistrationGetProcedure is the fully-qualified name of the ProviderService's
	// RegistrationGet RPC.
	ProviderServiceRegistrationGetProcedure = "/oppb.v1.ProviderService/RegistrationGet"
)

// ProviderServiceClient is a client for the oppb.v1.ProviderService service.
type ProviderServiceClient interface {
	Discovery(context.Context, *connect.Request[v1.DiscoveryRequest]) (*connect.Response[v1.DiscoveryResponse], error)
	Jwks(context.Context, *connect.Request[v1.JwksRequest]) (*connect.Response[v1.JwksResponse], error)
	Authorization(context.Context, *connect.Request[v1.AuthorizationRequest]) (*connect.Response[v1.AuthorizationResponse], error)
	AuthorizationIssue(context.Context, *connect.Request[v1.AuthorizationIssueRequest]) (*connect.Response[v1.AuthorizationIssueResponse], error)
	AuthorizationCancel(context.Context, *connect.Request[v1.AuthorizationCancelRequest]) (*connect.Response[v1.AuthorizationCancelResponse], error)
	StartSession(context.Context, *connect.Request[v1.StartSessionRequest]) (*connect.Response[v1.StartSessionResponse], error)
	Token(context.Context, *connect.Request[v1.TokenRequest]) (*connect.Response[v1.TokenResponse], error)
	Userinfo(context.Context, *connect.Request[v1.UserinfoRequest]) (*connect.Response[v1.UserinfoResponse], error)
	Request(context.Context, *connect.Request[v1.RequestRequest]) (*connect.Response[v1.RequestResponse], error)
	RegistrationCreate(context.Context, *connect.Request[v1.RegistrationCreateRequest]) (*connect.Response[v1.RegistrationCreateResponse], error)
	RegistrationDelete(context.Context, *connect.Request[v1.RegistrationDeleteRequest]) (*connect.Response[v1.RegistrationDeleteResponse], error)
	RegistrationGet(context.Context, *connect.Request[v1.RegistrationGetRequest]) (*connect.Response[v1.RegistrationGetResponse], error)
}

// NewProviderServiceClient constructs a client for the oppb.v1.ProviderService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	providerServiceMethods := v1.File_oppb_v1_provider_service_proto.Services().ByName("ProviderService").Methods()
	return &providerServiceClient{
		discovery: connect.NewClient[v1.DiscoveryRequest, v1.DiscoveryResponse](
			httpClient,
			baseURL+ProviderServiceDiscoveryProcedure,
			connect.WithSchema(providerServiceMethods.ByName("Discovery")),
			connect.WithClientOptions(opts...),
		),
		jwks: connect.NewClient[v1.JwksRequest, v1.JwksResponse](
			httpClient,
			baseURL+ProviderServiceJwksProcedure,
			connect.WithSchema(providerServiceMethods.ByName("Jwks")),
			connect.WithClientOptions(opts...),
		),
		authorization: connect.NewClient[v1.AuthorizationRequest, v1.AuthorizationResponse](
			httpClient,
			baseURL+ProviderServiceAuthorizationProcedure,
			connect.WithSchema(providerServiceMethods.ByName("Authorization")),
			connect.WithClientOptions(opts...),
		),
		authorizationIssue: connect.NewClient[v1.AuthorizationIssueRequest, v1.AuthorizationIssueResponse](
			httpClient,
			baseURL+ProviderServiceAuthorizationIssueProcedure,
			connect.WithSchema(providerServiceMethods.ByName("AuthorizationIssue")),
			connect.WithClientOptions(opts...),
		),
		authorizationCancel: connect.NewClient[v1.AuthorizationCancelRequest, v1.AuthorizationCancelResponse](
			httpClient,
			baseURL+ProviderServiceAuthorizationCancelProcedure,
			connect.WithSchema(providerServiceMethods.ByName("AuthorizationCancel")),
			connect.WithClientOptions(opts...),
		),
		startSession: connect.NewClient[v1.StartSessionRequest, v1.StartSessionResponse](
			httpClient,
			baseURL+ProviderServiceStartSessionProcedure,
			connect.WithSchema(providerServiceMethods.ByName("StartSession")),
			connect.WithClientOptions(opts...),
		),
		token: connect.NewClient[v1.TokenRequest, v1.TokenResponse](
			httpClient,
			baseURL+ProviderServiceTokenProcedure,
			connect.WithSchema(providerServiceMethods.ByName("Token")),
			connect.WithClientOptions(opts...),
		),
		userinfo: connect.NewClient[v1.UserinfoRequest, v1.UserinfoResponse](
			httpClient,
			baseURL+ProviderServiceUserinfoProcedure,
			connect.WithSchema(providerServiceMethods.ByName("Userinfo")),
			connect.WithClientOptions(opts...),
		),
		request: connect.NewClient[v1.RequestRequest, v1.RequestResponse](
			httpClient,
			baseURL+ProviderServiceRequestProcedure,
			connect.WithSchema(providerServiceMethods.ByName("Request")),
			connect.WithClientOptions(opts...),
		),
		registrationCreate: connect.NewClient[v1.RegistrationCreateRequest, v1.RegistrationCreateResponse](
			httpClient,
			baseURL+ProviderServiceRegistrationCreateProcedure,
			connect.WithSchema(providerServiceMethods.ByName("RegistrationCreate")),
			connect.WithClientOptions(opts...),
		),
		registrationDelete: connect.NewClient[v1.RegistrationDeleteRequest, v1.RegistrationDeleteResponse](
			httpClient,
			baseURL+ProviderServiceRegistrationDeleteProcedure,
			connect.WithSchema(providerServiceMethods.ByName("RegistrationDelete")),
			connect.WithClientOptions(opts...),
		),
		registrationGet: connect.NewClient[v1.RegistrationGetRequest, v1.RegistrationGetResponse](
			httpClient,
			baseURL+ProviderServiceRegistrationGetProcedure,
			connect.WithSchema(providerServiceMethods.ByName("RegistrationGet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	discovery           *connect.Client[v1.DiscoveryRequest, v1.DiscoveryResponse]
	jwks                *connect.Client[v1.JwksRequest, v1.JwksResponse]
	authorization       *connect.Client[v1.AuthorizationRequest, v1.AuthorizationResponse]
	authorizationIssue  *connect.Client[v1.AuthorizationIssueRequest, v1.AuthorizationIssueResponse]
	authorizationCancel *connect.Client[v1.AuthorizationCancelRequest, v1.AuthorizationCancelResponse]
	startSession        *connect.Client[v1.StartSessionRequest, v1.StartSessionResponse]
	token               *connect.Client[v1.TokenRequest, v1.TokenResponse]
	userinfo            *connect.Client[v1.UserinfoRequest, v1.UserinfoResponse]
	request             *connect.Client[v1.RequestRequest, v1.RequestResponse]
	registrationCreate  *connect.Client[v1.RegistrationCreateRequest, v1.RegistrationCreateResponse]
	registrationDelete  *connect.Client[v1.RegistrationDeleteRequest, v1.RegistrationDeleteResponse]
	registrationGet     *connect.Client[v1.RegistrationGetRequest, v1.RegistrationGetResponse]
}

// Discovery calls oppb.v1.ProviderService.Discovery.
func (c *providerServiceClient) Discovery(ctx context.Context, req *connect.Request[v1.DiscoveryRequest]) (*connect.Response[v1.DiscoveryResponse], error) {
	return c.discovery.CallUnary(ctx, req)
}

// Jwks calls oppb.v1.ProviderService.Jwks.
func (c *providerServiceClient) Jwks(ctx context.Context, req *connect.Request[v1.JwksRequest]) (*connect.Response[v1.JwksResponse], error) {
	return c.jwks.CallUnary(ctx, req)
}

// Authorization calls oppb.v1.ProviderService.Authorization.
func (c *providerServiceClient) Authorization(ctx context.Context, req *connect.Request[v1.AuthorizationRequest]) (*connect.Response[v1.AuthorizationResponse], error) {
	return c.authorization.CallUnary(ctx, req)
}

// AuthorizationIssue calls oppb.v1.ProviderService.AuthorizationIssue.
func (c *providerServiceClient) AuthorizationIssue(ctx context.Context, req *connect.Request[v1.AuthorizationIssueRequest]) (*connect.Response[v1.AuthorizationIssueResponse], error) {
	return c.authorizationIssue.CallUnary(ctx, req)
}

// AuthorizationCancel calls oppb.v1.ProviderService.AuthorizationCancel.
func (c *providerServiceClient) AuthorizationCancel(ctx context.Context, req *connect.Request[v1.AuthorizationCancelRequest]) (*connect.Response[v1.AuthorizationCancelResponse], error) {
	return c.authorizationCancel.CallUnary(ctx, req)
}

// StartSession calls oppb.v1.ProviderService.StartSession.
func (c *providerServiceClient) StartSession(ctx context.Context, req *connect.Request[v1.StartSessionRequest]) (*connect.Response[v1.StartSessionResponse], error) {
	return c.startSession.CallUnary(ctx, req)
}

// Token calls oppb.v1.ProviderService.Token.
func (c *providerServiceClient) Token(ctx context.Context, req *connect.Request[v1.TokenRequest]) (*connect.Response[v1.TokenResponse], error) {
	return c.token.CallUnary(ctx, req)
}

// Userinfo calls oppb.v1.ProviderService.Userinfo.
func (c *providerServiceClient) Userinfo(ctx context.Context, req *connect.Request[v1.UserinfoRequest]) (*connect.Response[v1.UserinfoResponse], error) {
	return c.userinfo.CallUnary(ctx, req)
}

// Request calls oppb.v1.ProviderService.Request.
func (c *providerServiceClient) Request(ctx context.Context, req *connect.Request[v1.RequestRequest]) (*connect.Response[v1.RequestResponse], error) {
	return c.request.CallUnary(ctx, req)
}

// RegistrationCreate calls oppb.v1.ProviderService.RegistrationCreate.
func (c *providerServiceClient) RegistrationCreate(ctx context.Context, req *connect.Request[v1.RegistrationCreateRequest]) (*connect.Response[v1.RegistrationCreateResponse], error) {
	return c.registrationCreate.CallUnary(ctx, req)
}

// RegistrationDelete calls oppb.v1.ProviderService.RegistrationDelete.
func (c *providerServiceClient) RegistrationDelete(ctx context.Context, req *connect.Request[v1.RegistrationDeleteRequest]) (*connect.Response[v1.RegistrationDeleteResponse], error) {
	return c.registrationDelete.CallUnary(ctx, req)
}

// RegistrationGet calls oppb.v1.ProviderService.RegistrationGet.
func (c *providerServiceClient) RegistrationGet(ctx context.Context, req *connect.Request[v1.RegistrationGetRequest]) (*connect.Response[v1.RegistrationGetResponse], error) {
	return c.registrationGet.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the oppb.v1.ProviderService service.
type ProviderServiceHandler interface {
	Discovery(context.Context, *connect.Request[v1.DiscoveryRequest]) (*connect.Response[v1.DiscoveryResponse], error)
	Jwks(context.Context, *connect.Request[v1.JwksRequest]) (*connect.Response[v1.JwksResponse], error)
	Authorization(context.Context, *connect.Request[v1.AuthorizationRequest]) (*connect.Response[v1.AuthorizationResponse], error)
	AuthorizationIssue(context.Context, *connect.Request[v1.AuthorizationIssueRequest]) (*connect.Response[v1.AuthorizationIssueResponse], error)
	AuthorizationCancel(context.Context, *connect.Request[v1.AuthorizationCancelRequest]) (*connect.Response[v1.AuthorizationCancelResponse], error)
	StartSession(context.Context, *connect.Request[v1.StartSessionRequest]) (*connect.Response[v1.StartSessionResponse], error)
	Token(context.Context, *connect.Request[v1.TokenRequest]) (*connect.Response[v1.TokenResponse], error)
	Userinfo(context.Context, *connect.Request[v1.UserinfoRequest]) (*connect.Response[v1.UserinfoResponse], error)
	Request(context.Context, *connect.Request[v1.RequestRequest]) (*connect.Response[v1.RequestResponse], error)
	RegistrationCreate(context.Context, *connect.Request[v1.RegistrationCreateRequest]) (*connect.Response[v1.RegistrationCreateResponse], error)
	RegistrationDelete(context.Context, *connect.Request[v1.RegistrationDeleteRequest]) (*connect.Response[v1.RegistrationDeleteResponse], error)
	RegistrationGet(context.Context, *connect.Request[v1.RegistrationGetRequest]) (*connect.Response[v1.RegistrationGetResponse], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerServiceMethods := v1.File_oppb_v1_provider_service_proto.Services().ByName("ProviderService").Methods()
	providerServiceDiscoveryHandler := connect.NewUnaryHandler(
		ProviderServiceDiscoveryProcedure,
		svc.Discovery,
		connect.WithSchema(providerServiceMethods.ByName("Discovery")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceJwksHandler := connect.NewUnaryHandler(
		ProviderServiceJwksProcedure,
		svc.Jwks,
		connect.WithSchema(providerServiceMethods.ByName("Jwks")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceAuthorizationHandler := connect.NewUnaryHandler(
		ProviderServiceAuthorizationProcedure,
		svc.Authorization,
		connect.WithSchema(providerServiceMethods.ByName("Authorization")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceAuthorizationIssueHandler := connect.NewUnaryHandler(
		ProviderServiceAuthorizationIssueProcedure,
		svc.AuthorizationIssue,
		connect.WithSchema(providerServiceMethods.ByName("AuthorizationIssue")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceAuthorizationCancelHandler := connect.NewUnaryHandler(
		ProviderServiceAuthorizationCancelProcedure,
		svc.AuthorizationCancel,
		connect.WithSchema(providerServiceMethods.ByName("AuthorizationCancel")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceStartSessionHandler := connect.NewUnaryHandler(
		ProviderServiceStartSessionProcedure,
		svc.StartSession,
		connect.WithSchema(providerServiceMethods.ByName("StartSession")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceTokenHandler := connect.NewUnaryHandler(
		ProviderServiceTokenProcedure,
		svc.Token,
		connect.WithSchema(providerServiceMethods.ByName("Token")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceUserinfoHandler := connect.NewUnaryHandler(
		ProviderServiceUserinfoProcedure,
		svc.Userinfo,
		connect.WithSchema(providerServiceMethods.ByName("Userinfo")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceRequestHandler := connect.NewUnaryHandler(
		ProviderServiceRequestProcedure,
		svc.Request,
		connect.WithSchema(providerServiceMethods.ByName("Request")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceRegistrationCreateHandler := connect.NewUnaryHandler(
		ProviderServiceRegistrationCreateProcedure,
		svc.RegistrationCreate,
		connect.WithSchema(providerServiceMethods.ByName("RegistrationCreate")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceRegistrationDeleteHandler := connect.NewUnaryHandler(
		ProviderServiceRegistrationDeleteProcedure,
		svc.RegistrationDelete,
		connect.WithSchema(providerServiceMethods.ByName("RegistrationDelete")),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceRegistrationGetHandler := connect.NewUnaryHandler(
		ProviderServiceRegistrationGetProcedure,
		svc.RegistrationGet,
		connect.WithSchema(providerServiceMethods.ByName("RegistrationGet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/oppb.v1.ProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderServiceDiscoveryProcedure:
			providerServiceDiscoveryHandler.ServeHTTP(w, r)
		case ProviderServiceJwksProcedure:
			providerServiceJwksHandler.ServeHTTP(w, r)
		case ProviderServiceAuthorizationProcedure:
			providerServiceAuthorizationHandler.ServeHTTP(w, r)
		case ProviderServiceAuthorizationIssueProcedure:
			providerServiceAuthorizationIssueHandler.ServeHTTP(w, r)
		case ProviderServiceAuthorizationCancelProcedure:
			providerServiceAuthorizationCancelHandler.ServeHTTP(w, r)
		case ProviderServiceStartSessionProcedure:
			providerServiceStartSessionHandler.ServeHTTP(w, r)
		case ProviderServiceTokenProcedure:
			providerServiceTokenHandler.ServeHTTP(w, r)
		case ProviderServiceUserinfoProcedure:
			providerServiceUserinfoHandler.ServeHTTP(w, r)
		case ProviderServiceRequestProcedure:
			providerServiceRequestHandler.ServeHTTP(w, r)
		case ProviderServiceRegistrationCreateProcedure:
			providerServiceRegistrationCreateHandler.ServeHTTP(w, r)
		case ProviderServiceRegistrationDeleteProcedure:
			providerServiceRegistrationDeleteHandler.ServeHTTP(w, r)
		case ProviderServiceRegistrationGetProcedure:
			providerServiceRegistrationGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) Discovery(context.Context, *connect.Request[v1.DiscoveryRequest]) (*connect.Response[v1.DiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.Discovery is not implemented"))
}

func (UnimplementedProviderServiceHandler) Jwks(context.Context, *connect.Request[v1.JwksRequest]) (*connect.Response[v1.JwksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.Jwks is not implemented"))
}

func (UnimplementedProviderServiceHandler) Authorization(context.Context, *connect.Request[v1.AuthorizationRequest]) (*connect.Response[v1.AuthorizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.Authorization is not implemented"))
}

func (UnimplementedProviderServiceHandler) AuthorizationIssue(context.Context, *connect.Request[v1.AuthorizationIssueRequest]) (*connect.Response[v1.AuthorizationIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.AuthorizationIssue is not implemented"))
}

func (UnimplementedProviderServiceHandler) AuthorizationCancel(context.Context, *connect.Request[v1.AuthorizationCancelRequest]) (*connect.Response[v1.AuthorizationCancelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.AuthorizationCancel is not implemented"))
}

func (UnimplementedProviderServiceHandler) StartSession(context.Context, *connect.Request[v1.StartSessionRequest]) (*connect.Response[v1.StartSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.StartSession is not implemented"))
}

func (UnimplementedProviderServiceHandler) Token(context.Context, *connect.Request[v1.TokenRequest]) (*connect.Response[v1.TokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.Token is not implemented"))
}

func (UnimplementedProviderServiceHandler) Userinfo(context.Context, *connect.Request[v1.UserinfoRequest]) (*connect.Response[v1.UserinfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.Userinfo is not implemented"))
}

func (UnimplementedProviderServiceHandler) Request(context.Context, *connect.Request[v1.RequestRequest]) (*connect.Response[v1.RequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.Request is not implemented"))
}

func (UnimplementedProviderServiceHandler) RegistrationCreate(context.Context, *connect.Request[v1.RegistrationCreateRequest]) (*connect.Response[v1.RegistrationCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.RegistrationCreate is not implemented"))
}

func (UnimplementedProviderServiceHandler) RegistrationDelete(context.Context, *connect.Request[v1.RegistrationDeleteRequest]) (*connect.Response[v1.RegistrationDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.RegistrationDelete is not implemented"))
}

func (UnimplementedProviderServiceHandler) RegistrationGet(context.Context, *connect.Request[v1.RegistrationGetRequest]) (*connect.Response[v1.RegistrationGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.ProviderService.RegistrationGet is not implemented"))
}

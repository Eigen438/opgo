// MIT License
//
// Copyright (c) 2025 Eigen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: oppb/v1/rest_service.proto

package oppbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Eigen438/opgo/pkg/auto-generated/oppb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RestServiceName is the fully-qualified name of the RestService service.
	RestServiceName = "oppb.v1.RestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RestServiceIssuerCreateProcedure is the fully-qualified name of the RestService's IssuerCreate
	// RPC.
	RestServiceIssuerCreateProcedure = "/oppb.v1.RestService/IssuerCreate"
	// RestServiceIssuerGetProcedure is the fully-qualified name of the RestService's IssuerGet RPC.
	RestServiceIssuerGetProcedure = "/oppb.v1.RestService/IssuerGet"
	// RestServiceIssuerUpdateProcedure is the fully-qualified name of the RestService's IssuerUpdate
	// RPC.
	RestServiceIssuerUpdateProcedure = "/oppb.v1.RestService/IssuerUpdate"
	// RestServiceClientCreateProcedure is the fully-qualified name of the RestService's ClientCreate
	// RPC.
	RestServiceClientCreateProcedure = "/oppb.v1.RestService/ClientCreate"
	// RestServiceSessionGroupCreateProcedure is the fully-qualified name of the RestService's
	// SessionGroupCreate RPC.
	RestServiceSessionGroupCreateProcedure = "/oppb.v1.RestService/SessionGroupCreate"
)

// RestServiceClient is a client for the oppb.v1.RestService service.
type RestServiceClient interface {
	IssuerCreate(context.Context, *connect.Request[v1.IssuerCreateRequest]) (*connect.Response[v1.IssuerCreateResponse], error)
	IssuerGet(context.Context, *connect.Request[v1.IssuerGetRequest]) (*connect.Response[v1.IssuerGetResponse], error)
	IssuerUpdate(context.Context, *connect.Request[v1.IssuerUpdateRequest]) (*connect.Response[v1.IssuerUpdateResponse], error)
	ClientCreate(context.Context, *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error)
	SessionGroupCreate(context.Context, *connect.Request[v1.SessionGroupCreateRequest]) (*connect.Response[v1.SessionGroupCreateResponse], error)
}

// NewRestServiceClient constructs a client for the oppb.v1.RestService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	restServiceMethods := v1.File_oppb_v1_rest_service_proto.Services().ByName("RestService").Methods()
	return &restServiceClient{
		issuerCreate: connect.NewClient[v1.IssuerCreateRequest, v1.IssuerCreateResponse](
			httpClient,
			baseURL+RestServiceIssuerCreateProcedure,
			connect.WithSchema(restServiceMethods.ByName("IssuerCreate")),
			connect.WithClientOptions(opts...),
		),
		issuerGet: connect.NewClient[v1.IssuerGetRequest, v1.IssuerGetResponse](
			httpClient,
			baseURL+RestServiceIssuerGetProcedure,
			connect.WithSchema(restServiceMethods.ByName("IssuerGet")),
			connect.WithClientOptions(opts...),
		),
		issuerUpdate: connect.NewClient[v1.IssuerUpdateRequest, v1.IssuerUpdateResponse](
			httpClient,
			baseURL+RestServiceIssuerUpdateProcedure,
			connect.WithSchema(restServiceMethods.ByName("IssuerUpdate")),
			connect.WithClientOptions(opts...),
		),
		clientCreate: connect.NewClient[v1.ClientCreateRequest, v1.ClientCreateResponse](
			httpClient,
			baseURL+RestServiceClientCreateProcedure,
			connect.WithSchema(restServiceMethods.ByName("ClientCreate")),
			connect.WithClientOptions(opts...),
		),
		sessionGroupCreate: connect.NewClient[v1.SessionGroupCreateRequest, v1.SessionGroupCreateResponse](
			httpClient,
			baseURL+RestServiceSessionGroupCreateProcedure,
			connect.WithSchema(restServiceMethods.ByName("SessionGroupCreate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// restServiceClient implements RestServiceClient.
type restServiceClient struct {
	issuerCreate       *connect.Client[v1.IssuerCreateRequest, v1.IssuerCreateResponse]
	issuerGet          *connect.Client[v1.IssuerGetRequest, v1.IssuerGetResponse]
	issuerUpdate       *connect.Client[v1.IssuerUpdateRequest, v1.IssuerUpdateResponse]
	clientCreate       *connect.Client[v1.ClientCreateRequest, v1.ClientCreateResponse]
	sessionGroupCreate *connect.Client[v1.SessionGroupCreateRequest, v1.SessionGroupCreateResponse]
}

// IssuerCreate calls oppb.v1.RestService.IssuerCreate.
func (c *restServiceClient) IssuerCreate(ctx context.Context, req *connect.Request[v1.IssuerCreateRequest]) (*connect.Response[v1.IssuerCreateResponse], error) {
	return c.issuerCreate.CallUnary(ctx, req)
}

// IssuerGet calls oppb.v1.RestService.IssuerGet.
func (c *restServiceClient) IssuerGet(ctx context.Context, req *connect.Request[v1.IssuerGetRequest]) (*connect.Response[v1.IssuerGetResponse], error) {
	return c.issuerGet.CallUnary(ctx, req)
}

// IssuerUpdate calls oppb.v1.RestService.IssuerUpdate.
func (c *restServiceClient) IssuerUpdate(ctx context.Context, req *connect.Request[v1.IssuerUpdateRequest]) (*connect.Response[v1.IssuerUpdateResponse], error) {
	return c.issuerUpdate.CallUnary(ctx, req)
}

// ClientCreate calls oppb.v1.RestService.ClientCreate.
func (c *restServiceClient) ClientCreate(ctx context.Context, req *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error) {
	return c.clientCreate.CallUnary(ctx, req)
}

// SessionGroupCreate calls oppb.v1.RestService.SessionGroupCreate.
func (c *restServiceClient) SessionGroupCreate(ctx context.Context, req *connect.Request[v1.SessionGroupCreateRequest]) (*connect.Response[v1.SessionGroupCreateResponse], error) {
	return c.sessionGroupCreate.CallUnary(ctx, req)
}

// RestServiceHandler is an implementation of the oppb.v1.RestService service.
type RestServiceHandler interface {
	IssuerCreate(context.Context, *connect.Request[v1.IssuerCreateRequest]) (*connect.Response[v1.IssuerCreateResponse], error)
	IssuerGet(context.Context, *connect.Request[v1.IssuerGetRequest]) (*connect.Response[v1.IssuerGetResponse], error)
	IssuerUpdate(context.Context, *connect.Request[v1.IssuerUpdateRequest]) (*connect.Response[v1.IssuerUpdateResponse], error)
	ClientCreate(context.Context, *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error)
	SessionGroupCreate(context.Context, *connect.Request[v1.SessionGroupCreateRequest]) (*connect.Response[v1.SessionGroupCreateResponse], error)
}

// NewRestServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRestServiceHandler(svc RestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	restServiceMethods := v1.File_oppb_v1_rest_service_proto.Services().ByName("RestService").Methods()
	restServiceIssuerCreateHandler := connect.NewUnaryHandler(
		RestServiceIssuerCreateProcedure,
		svc.IssuerCreate,
		connect.WithSchema(restServiceMethods.ByName("IssuerCreate")),
		connect.WithHandlerOptions(opts...),
	)
	restServiceIssuerGetHandler := connect.NewUnaryHandler(
		RestServiceIssuerGetProcedure,
		svc.IssuerGet,
		connect.WithSchema(restServiceMethods.ByName("IssuerGet")),
		connect.WithHandlerOptions(opts...),
	)
	restServiceIssuerUpdateHandler := connect.NewUnaryHandler(
		RestServiceIssuerUpdateProcedure,
		svc.IssuerUpdate,
		connect.WithSchema(restServiceMethods.ByName("IssuerUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	restServiceClientCreateHandler := connect.NewUnaryHandler(
		RestServiceClientCreateProcedure,
		svc.ClientCreate,
		connect.WithSchema(restServiceMethods.ByName("ClientCreate")),
		connect.WithHandlerOptions(opts...),
	)
	restServiceSessionGroupCreateHandler := connect.NewUnaryHandler(
		RestServiceSessionGroupCreateProcedure,
		svc.SessionGroupCreate,
		connect.WithSchema(restServiceMethods.ByName("SessionGroupCreate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/oppb.v1.RestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RestServiceIssuerCreateProcedure:
			restServiceIssuerCreateHandler.ServeHTTP(w, r)
		case RestServiceIssuerGetProcedure:
			restServiceIssuerGetHandler.ServeHTTP(w, r)
		case RestServiceIssuerUpdateProcedure:
			restServiceIssuerUpdateHandler.ServeHTTP(w, r)
		case RestServiceClientCreateProcedure:
			restServiceClientCreateHandler.ServeHTTP(w, r)
		case RestServiceSessionGroupCreateProcedure:
			restServiceSessionGroupCreateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRestServiceHandler struct{}

func (UnimplementedRestServiceHandler) IssuerCreate(context.Context, *connect.Request[v1.IssuerCreateRequest]) (*connect.Response[v1.IssuerCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.RestService.IssuerCreate is not implemented"))
}

func (UnimplementedRestServiceHandler) IssuerGet(context.Context, *connect.Request[v1.IssuerGetRequest]) (*connect.Response[v1.IssuerGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.RestService.IssuerGet is not implemented"))
}

func (UnimplementedRestServiceHandler) IssuerUpdate(context.Context, *connect.Request[v1.IssuerUpdateRequest]) (*connect.Response[v1.IssuerUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.RestService.IssuerUpdate is not implemented"))
}

func (UnimplementedRestServiceHandler) ClientCreate(context.Context, *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.RestService.ClientCreate is not implemented"))
}

func (UnimplementedRestServiceHandler) SessionGroupCreate(context.Context, *connect.Request[v1.SessionGroupCreateRequest]) (*connect.Response[v1.SessionGroupCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oppb.v1.RestService.SessionGroupCreate is not implemented"))
}

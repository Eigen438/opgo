// MIT License
//
// Copyright (c) 2025 Eigen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: oppb/v1/issuer_meta.proto

package oppb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The order of the descriptions should follow the RFC they were cited from.
type IssuerMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// issuer
	// REQUIRED. URL using the https scheme with no query or fragment components that the OP asserts as its Issuer Identifier.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// authorization_endpoint
	// REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint [OpenID.Core]. This URL MUST use the https scheme
	// and MAY contain port, path, and query parameter components.
	AuthorizationEndpoint string `protobuf:"bytes,2,opt,name=authorization_endpoint,proto3" json:"authorization_endpoint,omitempty"`
	// token_endpoint
	// This is REQUIRED unless only the Implicit Flow is used.
	TokenEndpoint string `protobuf:"bytes,3,opt,name=token_endpoint,proto3" json:"token_endpoint,omitempty"`
	// jwks_uri
	// REQUIRED. URL of the OP's JWK Set [JWK] document, which MUST use the https scheme.
	JwksUri              string   `protobuf:"bytes,4,opt,name=jwks_uri,proto3" json:"jwks_uri,omitempty"`
	RegistrationEndpoint string   `protobuf:"bytes,5,opt,name=registration_endpoint,proto3" json:"registration_endpoint,omitempty"`
	ScopesSupported      []string `protobuf:"bytes,6,rep,name=scopes_supported,proto3" json:"scopes_supported,omitempty"`
	// response_types_supported
	// REQUIRED. JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.
	// Dynamic OpenID Providers MUST support the code, id_token, and the id_token token Response Type values.
	ResponseTypesSupported                             []string `protobuf:"bytes,7,rep,name=response_types_supported,proto3" json:"response_types_supported,omitempty"`
	ResponseModesSupported                             []string `protobuf:"bytes,8,rep,name=response_modes_supported,proto3" json:"response_modes_supported,omitempty"`
	GrantTypesSupported                                []string `protobuf:"bytes,9,rep,name=grant_types_supported,proto3" json:"grant_types_supported,omitempty"`
	TokenEndpointAuthMethodsSupported                  []string `protobuf:"bytes,10,rep,name=token_endpoint_auth_methods_supported,proto3" json:"token_endpoint_auth_methods_supported,omitempty"`
	TokenEndpointAuthSigningAlgValuesSupported         []string `protobuf:"bytes,11,rep,name=token_endpoint_auth_signing_alg_values_supported,proto3" json:"token_endpoint_auth_signing_alg_values_supported,omitempty"`
	ServiceDocumentation                               string   `protobuf:"bytes,12,opt,name=service_documentation,proto3" json:"service_documentation,omitempty"`
	UiLocalesSupported                                 []string `protobuf:"bytes,13,rep,name=ui_locales_supported,proto3" json:"ui_locales_supported,omitempty"`
	OpPolicyUri                                        string   `protobuf:"bytes,14,opt,name=op_policy_uri,proto3" json:"op_policy_uri,omitempty"`
	OpTosUri                                           string   `protobuf:"bytes,15,opt,name=op_tos_uri,proto3" json:"op_tos_uri,omitempty"`
	RevocationEndpoint                                 string   `protobuf:"bytes,16,opt,name=revocation_endpoint,proto3" json:"revocation_endpoint,omitempty"`
	RevocationEndpointAuthMethodsSupported             []string `protobuf:"bytes,17,rep,name=revocation_endpoint_auth_methods_supported,proto3" json:"revocation_endpoint_auth_methods_supported,omitempty"`
	RevocationEndpointAuthSigningAlgValuesSupported    []string `protobuf:"bytes,18,rep,name=revocation_endpoint_auth_signing_alg_values_supported,proto3" json:"revocation_endpoint_auth_signing_alg_values_supported,omitempty"`
	IntrospectionEndpoint                              string   `protobuf:"bytes,19,opt,name=introspection_endpoint,proto3" json:"introspection_endpoint,omitempty"`
	IntrospectionEndpointAuthMethodsSupported          []string `protobuf:"bytes,20,rep,name=introspection_endpoint_auth_methods_supported,proto3" json:"introspection_endpoint_auth_methods_supported,omitempty"`
	IntrospectionEndpointAuthSigningAlgValuesSupported []string `protobuf:"bytes,21,rep,name=introspection_endpoint_auth_signing_alg_values_supported,proto3" json:"introspection_endpoint_auth_signing_alg_values_supported,omitempty"`
	CodeChallengeMethodsSupported                      []string `protobuf:"bytes,22,rep,name=code_challenge_methods_supported,proto3" json:"code_challenge_methods_supported,omitempty"`
	// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
	UserinfoEndpoint   string   `protobuf:"bytes,30,opt,name=userinfo_endpoint,proto3" json:"userinfo_endpoint,omitempty"`
	AcrValuesSupported []string `protobuf:"bytes,31,rep,name=acr_values_supported,proto3" json:"acr_values_supported,omitempty"`
	// subject_types_supported
	// REQUIRED. JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
	SubjectTypesSupported []string `protobuf:"bytes,32,rep,name=subject_types_supported,proto3" json:"subject_types_supported,omitempty"`
	// id_token_signing_alg_values_supported
	// REQUIRED. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode
	// the Claims in a JWT [JWT]. The algorithm RS256 MUST be included.
	IdTokenSigningAlgValuesSupported          []string `protobuf:"bytes,33,rep,name=id_token_signing_alg_values_supported,proto3" json:"id_token_signing_alg_values_supported,omitempty"`
	IdTokenEncryptionAlgValuesSupported       []string `protobuf:"bytes,34,rep,name=id_token_encryption_alg_values_supported,proto3" json:"id_token_encryption_alg_values_supported,omitempty"`
	IdTokenEncryptionEncValuesSupported       []string `protobuf:"bytes,35,rep,name=id_token_encryption_enc_values_supported,proto3" json:"id_token_encryption_enc_values_supported,omitempty"`
	UserinfoSigningAlgValuesSupported         []string `protobuf:"bytes,36,rep,name=userinfo_signing_alg_values_supported,proto3" json:"userinfo_signing_alg_values_supported,omitempty"`
	UserinfoEncryptionAlgValuesSupported      []string `protobuf:"bytes,37,rep,name=userinfo_encryption_alg_values_supported,proto3" json:"userinfo_encryption_alg_values_supported,omitempty"`
	UserinfoEncryptionEncValuesSupported      []string `protobuf:"bytes,38,rep,name=userinfo_encryption_enc_values_supported,proto3" json:"userinfo_encryption_enc_values_supported,omitempty"`
	RequestObjectSigningAlgValuesSupported    []string `protobuf:"bytes,39,rep,name=request_object_signing_alg_values_supported,proto3" json:"request_object_signing_alg_values_supported,omitempty"`
	RequestObjectEncryptionAlgValuesSupported []string `protobuf:"bytes,40,rep,name=request_object_encryption_alg_values_supported,proto3" json:"request_object_encryption_alg_values_supported,omitempty"`
	RequestObjectEncryptionEncValuesSupported []string `protobuf:"bytes,41,rep,name=request_object_encryption_enc_values_supported,proto3" json:"request_object_encryption_enc_values_supported,omitempty"`
	DisplayValuesSupported                    []string `protobuf:"bytes,42,rep,name=display_values_supported,proto3" json:"display_values_supported,omitempty"`
	ClaimTypesSupported                       []string `protobuf:"bytes,43,rep,name=claim_types_supported,proto3" json:"claim_types_supported,omitempty"`
	ClaimsSupported                           []string `protobuf:"bytes,44,rep,name=claims_supported,proto3" json:"claims_supported,omitempty"`
	ClaimsLocalesSupported                    []string `protobuf:"bytes,45,rep,name=claims_locales_supported,proto3" json:"claims_locales_supported,omitempty"`
	ClaimsParameterSupported                  bool     `protobuf:"varint,46,opt,name=claims_parameter_supported,proto3" json:"claims_parameter_supported,omitempty"`
	RequestParameterSupported                 bool     `protobuf:"varint,47,opt,name=request_parameter_supported,proto3" json:"request_parameter_supported,omitempty"`
	RequestUriParameterSupported              bool     `protobuf:"varint,48,opt,name=request_uri_parameter_supported,proto3" json:"request_uri_parameter_supported,omitempty"`
	RequireRequestUriRegistration             bool     `protobuf:"varint,49,opt,name=require_request_uri_registration,proto3" json:"require_request_uri_registration,omitempty"`
	// https://openid.net/specs/openid-connect-rpinitiated-1_0.html#OPMetadata
	EndSessionEndpoint string `protobuf:"bytes,50,opt,name=end_session_endpoint,proto3" json:"end_session_endpoint,omitempty"`
	// https://www.rfc-editor.org/rfc/rfc9126.html#section-5
	PushedAuthorizationRequestEndpoint string `protobuf:"bytes,60,opt,name=pushed_authorization_request_endpoint,proto3" json:"pushed_authorization_request_endpoint,omitempty"`
	RequirePushedAuthorizationRequests bool   `protobuf:"varint,61,opt,name=require_pushed_authorization_requests,proto3" json:"require_pushed_authorization_requests,omitempty"`
	// https://openid.net/specs/openid-financial-api-jarm.html#authorization-server-metadata
	AuthorizationSigningAlgValuesSupported    []string `protobuf:"bytes,70,rep,name=authorization_signing_alg_values_supported,proto3" json:"authorization_signing_alg_values_supported,omitempty"`
	AuthorizationEncryptionAlgValuesSupported []string `protobuf:"bytes,71,rep,name=authorization_encryption_alg_values_supported,proto3" json:"authorization_encryption_alg_values_supported,omitempty"`
	AuthorizationEncryptionEncValuesSupported []string `protobuf:"bytes,72,rep,name=authorization_encryption_enc_values_supported,proto3" json:"authorization_encryption_enc_values_supported,omitempty"`
	// https://datatracker.ietf.org/doc/html/rfc9207#name-authorization-server-metada
	AuthorizationResponseIssParameterSupported bool `protobuf:"varint,80,opt,name=authorization_response_iss_parameter_supported,proto3" json:"authorization_response_iss_parameter_supported,omitempty"`
	// https://openid.net/specs/openid-connect-backchannel-1_0.html#BCSupport
	BackchannelLogoutSupported        bool `protobuf:"varint,90,opt,name=backchannel_logout_supported,proto3" json:"backchannel_logout_supported,omitempty"`
	BackchannelLogoutSessionSupported bool `protobuf:"varint,91,opt,name=backchannel_logout_session_supported,proto3" json:"backchannel_logout_session_supported,omitempty"`
	// https://openid.net/specs/openid-connect-frontchannel-1_0.html#OPLogout
	FrontchannelLogoutSupported        bool `protobuf:"varint,100,opt,name=frontchannel_logout_supported,proto3" json:"frontchannel_logout_supported,omitempty"`
	FrontchannelLogoutSessionSupported bool `protobuf:"varint,101,opt,name=frontchannel_logout_session_supported,proto3" json:"frontchannel_logout_session_supported,omitempty"`
	// https://datatracker.ietf.org/doc/html/rfc8705#section-3.3
	TlsClientCertificateBoundAccessTokens bool `protobuf:"varint,110,opt,name=tls_client_certificate_bound_access_tokens,proto3" json:"tls_client_certificate_bound_access_tokens,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *IssuerMeta) Reset() {
	*x = IssuerMeta{}
	mi := &file_oppb_v1_issuer_meta_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerMeta) ProtoMessage() {}

func (x *IssuerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_oppb_v1_issuer_meta_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerMeta.ProtoReflect.Descriptor instead.
func (*IssuerMeta) Descriptor() ([]byte, []int) {
	return file_oppb_v1_issuer_meta_proto_rawDescGZIP(), []int{0}
}

func (x *IssuerMeta) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *IssuerMeta) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *IssuerMeta) GetRegistrationEndpoint() string {
	if x != nil {
		return x.RegistrationEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetScopesSupported() []string {
	if x != nil {
		return x.ScopesSupported
	}
	return nil
}

func (x *IssuerMeta) GetResponseTypesSupported() []string {
	if x != nil {
		return x.ResponseTypesSupported
	}
	return nil
}

func (x *IssuerMeta) GetResponseModesSupported() []string {
	if x != nil {
		return x.ResponseModesSupported
	}
	return nil
}

func (x *IssuerMeta) GetGrantTypesSupported() []string {
	if x != nil {
		return x.GrantTypesSupported
	}
	return nil
}

func (x *IssuerMeta) GetTokenEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.TokenEndpointAuthMethodsSupported
	}
	return nil
}

func (x *IssuerMeta) GetTokenEndpointAuthSigningAlgValuesSupported() []string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetServiceDocumentation() string {
	if x != nil {
		return x.ServiceDocumentation
	}
	return ""
}

func (x *IssuerMeta) GetUiLocalesSupported() []string {
	if x != nil {
		return x.UiLocalesSupported
	}
	return nil
}

func (x *IssuerMeta) GetOpPolicyUri() string {
	if x != nil {
		return x.OpPolicyUri
	}
	return ""
}

func (x *IssuerMeta) GetOpTosUri() string {
	if x != nil {
		return x.OpTosUri
	}
	return ""
}

func (x *IssuerMeta) GetRevocationEndpoint() string {
	if x != nil {
		return x.RevocationEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetRevocationEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.RevocationEndpointAuthMethodsSupported
	}
	return nil
}

func (x *IssuerMeta) GetRevocationEndpointAuthSigningAlgValuesSupported() []string {
	if x != nil {
		return x.RevocationEndpointAuthSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetIntrospectionEndpoint() string {
	if x != nil {
		return x.IntrospectionEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetIntrospectionEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.IntrospectionEndpointAuthMethodsSupported
	}
	return nil
}

func (x *IssuerMeta) GetIntrospectionEndpointAuthSigningAlgValuesSupported() []string {
	if x != nil {
		return x.IntrospectionEndpointAuthSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetCodeChallengeMethodsSupported() []string {
	if x != nil {
		return x.CodeChallengeMethodsSupported
	}
	return nil
}

func (x *IssuerMeta) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetAcrValuesSupported() []string {
	if x != nil {
		return x.AcrValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetSubjectTypesSupported() []string {
	if x != nil {
		return x.SubjectTypesSupported
	}
	return nil
}

func (x *IssuerMeta) GetIdTokenSigningAlgValuesSupported() []string {
	if x != nil {
		return x.IdTokenSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetIdTokenEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.IdTokenEncryptionAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetIdTokenEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.IdTokenEncryptionEncValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetUserinfoSigningAlgValuesSupported() []string {
	if x != nil {
		return x.UserinfoSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetUserinfoEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.UserinfoEncryptionAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetUserinfoEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.UserinfoEncryptionEncValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetRequestObjectSigningAlgValuesSupported() []string {
	if x != nil {
		return x.RequestObjectSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetRequestObjectEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.RequestObjectEncryptionAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetRequestObjectEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.RequestObjectEncryptionEncValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetDisplayValuesSupported() []string {
	if x != nil {
		return x.DisplayValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetClaimTypesSupported() []string {
	if x != nil {
		return x.ClaimTypesSupported
	}
	return nil
}

func (x *IssuerMeta) GetClaimsSupported() []string {
	if x != nil {
		return x.ClaimsSupported
	}
	return nil
}

func (x *IssuerMeta) GetClaimsLocalesSupported() []string {
	if x != nil {
		return x.ClaimsLocalesSupported
	}
	return nil
}

func (x *IssuerMeta) GetClaimsParameterSupported() bool {
	if x != nil {
		return x.ClaimsParameterSupported
	}
	return false
}

func (x *IssuerMeta) GetRequestParameterSupported() bool {
	if x != nil {
		return x.RequestParameterSupported
	}
	return false
}

func (x *IssuerMeta) GetRequestUriParameterSupported() bool {
	if x != nil {
		return x.RequestUriParameterSupported
	}
	return false
}

func (x *IssuerMeta) GetRequireRequestUriRegistration() bool {
	if x != nil {
		return x.RequireRequestUriRegistration
	}
	return false
}

func (x *IssuerMeta) GetEndSessionEndpoint() string {
	if x != nil {
		return x.EndSessionEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetPushedAuthorizationRequestEndpoint() string {
	if x != nil {
		return x.PushedAuthorizationRequestEndpoint
	}
	return ""
}

func (x *IssuerMeta) GetRequirePushedAuthorizationRequests() bool {
	if x != nil {
		return x.RequirePushedAuthorizationRequests
	}
	return false
}

func (x *IssuerMeta) GetAuthorizationSigningAlgValuesSupported() []string {
	if x != nil {
		return x.AuthorizationSigningAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetAuthorizationEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.AuthorizationEncryptionAlgValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetAuthorizationEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.AuthorizationEncryptionEncValuesSupported
	}
	return nil
}

func (x *IssuerMeta) GetAuthorizationResponseIssParameterSupported() bool {
	if x != nil {
		return x.AuthorizationResponseIssParameterSupported
	}
	return false
}

func (x *IssuerMeta) GetBackchannelLogoutSupported() bool {
	if x != nil {
		return x.BackchannelLogoutSupported
	}
	return false
}

func (x *IssuerMeta) GetBackchannelLogoutSessionSupported() bool {
	if x != nil {
		return x.BackchannelLogoutSessionSupported
	}
	return false
}

func (x *IssuerMeta) GetFrontchannelLogoutSupported() bool {
	if x != nil {
		return x.FrontchannelLogoutSupported
	}
	return false
}

func (x *IssuerMeta) GetFrontchannelLogoutSessionSupported() bool {
	if x != nil {
		return x.FrontchannelLogoutSessionSupported
	}
	return false
}

func (x *IssuerMeta) GetTlsClientCertificateBoundAccessTokens() bool {
	if x != nil {
		return x.TlsClientCertificateBoundAccessTokens
	}
	return false
}

var File_oppb_v1_issuer_meta_proto protoreflect.FileDescriptor

const file_oppb_v1_issuer_meta_proto_rawDesc = "" +
	"\n" +
	"\x19oppb/v1/issuer_meta.proto\x12\aoppb.v1\"\xf4\x1e\n" +
	"\n" +
	"IssuerMeta\x12\x16\n" +
	"\x06issuer\x18\x01 \x01(\tR\x06issuer\x126\n" +
	"\x16authorization_endpoint\x18\x02 \x01(\tR\x16authorization_endpoint\x12&\n" +
	"\x0etoken_endpoint\x18\x03 \x01(\tR\x0etoken_endpoint\x12\x1a\n" +
	"\bjwks_uri\x18\x04 \x01(\tR\bjwks_uri\x124\n" +
	"\x15registration_endpoint\x18\x05 \x01(\tR\x15registration_endpoint\x12*\n" +
	"\x10scopes_supported\x18\x06 \x03(\tR\x10scopes_supported\x12:\n" +
	"\x18response_types_supported\x18\a \x03(\tR\x18response_types_supported\x12:\n" +
	"\x18response_modes_supported\x18\b \x03(\tR\x18response_modes_supported\x124\n" +
	"\x15grant_types_supported\x18\t \x03(\tR\x15grant_types_supported\x12T\n" +
	"%token_endpoint_auth_methods_supported\x18\n" +
	" \x03(\tR%token_endpoint_auth_methods_supported\x12j\n" +
	"0token_endpoint_auth_signing_alg_values_supported\x18\v \x03(\tR0token_endpoint_auth_signing_alg_values_supported\x124\n" +
	"\x15service_documentation\x18\f \x01(\tR\x15service_documentation\x122\n" +
	"\x14ui_locales_supported\x18\r \x03(\tR\x14ui_locales_supported\x12$\n" +
	"\rop_policy_uri\x18\x0e \x01(\tR\rop_policy_uri\x12\x1e\n" +
	"\n" +
	"op_tos_uri\x18\x0f \x01(\tR\n" +
	"op_tos_uri\x120\n" +
	"\x13revocation_endpoint\x18\x10 \x01(\tR\x13revocation_endpoint\x12^\n" +
	"*revocation_endpoint_auth_methods_supported\x18\x11 \x03(\tR*revocation_endpoint_auth_methods_supported\x12t\n" +
	"5revocation_endpoint_auth_signing_alg_values_supported\x18\x12 \x03(\tR5revocation_endpoint_auth_signing_alg_values_supported\x126\n" +
	"\x16introspection_endpoint\x18\x13 \x01(\tR\x16introspection_endpoint\x12d\n" +
	"-introspection_endpoint_auth_methods_supported\x18\x14 \x03(\tR-introspection_endpoint_auth_methods_supported\x12z\n" +
	"8introspection_endpoint_auth_signing_alg_values_supported\x18\x15 \x03(\tR8introspection_endpoint_auth_signing_alg_values_supported\x12J\n" +
	" code_challenge_methods_supported\x18\x16 \x03(\tR code_challenge_methods_supported\x12,\n" +
	"\x11userinfo_endpoint\x18\x1e \x01(\tR\x11userinfo_endpoint\x122\n" +
	"\x14acr_values_supported\x18\x1f \x03(\tR\x14acr_values_supported\x128\n" +
	"\x17subject_types_supported\x18  \x03(\tR\x17subject_types_supported\x12T\n" +
	"%id_token_signing_alg_values_supported\x18! \x03(\tR%id_token_signing_alg_values_supported\x12Z\n" +
	"(id_token_encryption_alg_values_supported\x18\" \x03(\tR(id_token_encryption_alg_values_supported\x12Z\n" +
	"(id_token_encryption_enc_values_supported\x18# \x03(\tR(id_token_encryption_enc_values_supported\x12T\n" +
	"%userinfo_signing_alg_values_supported\x18$ \x03(\tR%userinfo_signing_alg_values_supported\x12Z\n" +
	"(userinfo_encryption_alg_values_supported\x18% \x03(\tR(userinfo_encryption_alg_values_supported\x12Z\n" +
	"(userinfo_encryption_enc_values_supported\x18& \x03(\tR(userinfo_encryption_enc_values_supported\x12`\n" +
	"+request_object_signing_alg_values_supported\x18' \x03(\tR+request_object_signing_alg_values_supported\x12f\n" +
	".request_object_encryption_alg_values_supported\x18( \x03(\tR.request_object_encryption_alg_values_supported\x12f\n" +
	".request_object_encryption_enc_values_supported\x18) \x03(\tR.request_object_encryption_enc_values_supported\x12:\n" +
	"\x18display_values_supported\x18* \x03(\tR\x18display_values_supported\x124\n" +
	"\x15claim_types_supported\x18+ \x03(\tR\x15claim_types_supported\x12*\n" +
	"\x10claims_supported\x18, \x03(\tR\x10claims_supported\x12:\n" +
	"\x18claims_locales_supported\x18- \x03(\tR\x18claims_locales_supported\x12>\n" +
	"\x1aclaims_parameter_supported\x18. \x01(\bR\x1aclaims_parameter_supported\x12@\n" +
	"\x1brequest_parameter_supported\x18/ \x01(\bR\x1brequest_parameter_supported\x12H\n" +
	"\x1frequest_uri_parameter_supported\x180 \x01(\bR\x1frequest_uri_parameter_supported\x12J\n" +
	" require_request_uri_registration\x181 \x01(\bR require_request_uri_registration\x122\n" +
	"\x14end_session_endpoint\x182 \x01(\tR\x14end_session_endpoint\x12T\n" +
	"%pushed_authorization_request_endpoint\x18< \x01(\tR%pushed_authorization_request_endpoint\x12T\n" +
	"%require_pushed_authorization_requests\x18= \x01(\bR%require_pushed_authorization_requests\x12^\n" +
	"*authorization_signing_alg_values_supported\x18F \x03(\tR*authorization_signing_alg_values_supported\x12d\n" +
	"-authorization_encryption_alg_values_supported\x18G \x03(\tR-authorization_encryption_alg_values_supported\x12d\n" +
	"-authorization_encryption_enc_values_supported\x18H \x03(\tR-authorization_encryption_enc_values_supported\x12f\n" +
	".authorization_response_iss_parameter_supported\x18P \x01(\bR.authorization_response_iss_parameter_supported\x12B\n" +
	"\x1cbackchannel_logout_supported\x18Z \x01(\bR\x1cbackchannel_logout_supported\x12R\n" +
	"$backchannel_logout_session_supported\x18[ \x01(\bR$backchannel_logout_session_supported\x12D\n" +
	"\x1dfrontchannel_logout_supported\x18d \x01(\bR\x1dfrontchannel_logout_supported\x12T\n" +
	"%frontchannel_logout_session_supported\x18e \x01(\bR%frontchannel_logout_session_supported\x12^\n" +
	"*tls_client_certificate_bound_access_tokens\x18n \x01(\bR*tls_client_certificate_bound_access_tokensB\x95\x01\n" +
	"\vcom.oppb.v1B\x0fIssuerMetaProtoP\x01Z8github.com/Eigen438/opgo/pkg/auto-generated/oppb/v1;oppb\xa2\x02\x03OXX\xaa\x02\aOppb.V1\xca\x02\aOppb\\V1\xe2\x02\x13Oppb\\V1\\GPBMetadata\xea\x02\bOppb::V1b\x06proto3"

var (
	file_oppb_v1_issuer_meta_proto_rawDescOnce sync.Once
	file_oppb_v1_issuer_meta_proto_rawDescData []byte
)

func file_oppb_v1_issuer_meta_proto_rawDescGZIP() []byte {
	file_oppb_v1_issuer_meta_proto_rawDescOnce.Do(func() {
		file_oppb_v1_issuer_meta_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_oppb_v1_issuer_meta_proto_rawDesc), len(file_oppb_v1_issuer_meta_proto_rawDesc)))
	})
	return file_oppb_v1_issuer_meta_proto_rawDescData
}

var file_oppb_v1_issuer_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_oppb_v1_issuer_meta_proto_goTypes = []any{
	(*IssuerMeta)(nil), // 0: oppb.v1.IssuerMeta
}
var file_oppb_v1_issuer_meta_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_oppb_v1_issuer_meta_proto_init() }
func file_oppb_v1_issuer_meta_proto_init() {
	if File_oppb_v1_issuer_meta_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_oppb_v1_issuer_meta_proto_rawDesc), len(file_oppb_v1_issuer_meta_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oppb_v1_issuer_meta_proto_goTypes,
		DependencyIndexes: file_oppb_v1_issuer_meta_proto_depIdxs,
		MessageInfos:      file_oppb_v1_issuer_meta_proto_msgTypes,
	}.Build()
	File_oppb_v1_issuer_meta_proto = out.File
	file_oppb_v1_issuer_meta_proto_goTypes = nil
	file_oppb_v1_issuer_meta_proto_depIdxs = nil
}

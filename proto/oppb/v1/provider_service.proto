// MIT License
//
// Copyright (c) 2025 Eigen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package oppb.v1;

import "oppb/v1/authorization_parameters.proto";
import "oppb/v1/client.proto";
import "oppb/v1/client_meta.proto";
import "oppb/v1/issuer_meta.proto";
import "oppb/v1/jwks.proto";
import "oppb/v1/registration.proto";

option go_package = "github.com/Eigen438/opgo/pkg/auto-generated/oppb/v1;oppb";

service ProviderService {
  rpc Discovery(DiscoveryRequest) returns (DiscoveryResponse);
  rpc Jwks(JwksRequest) returns (JwksResponse);
  rpc Authorization(AuthorizationRequest) returns (AuthorizationResponse);
  rpc AuthorizationIssue(AuthorizationIssueRequest) returns (AuthorizationIssueResponse);
  rpc AuthorizationCancel(AuthorizationCancelRequest) returns (AuthorizationCancelResponse);
  rpc StartSession(StartSessionRequest) returns (StartSessionResponse);
  rpc Token(TokenRequest) returns (TokenResponse);
  rpc Userinfo(UserinfoRequest) returns (UserinfoResponse);
  rpc Request(RequestRequest) returns (RequestResponse);
  rpc RegistrationCreate(RegistrationCreateRequest) returns (RegistrationCreateResponse);
  rpc RegistrationDelete(RegistrationDeleteRequest) returns (RegistrationDeleteResponse);
  rpc RegistrationGet(RegistrationGetRequest) returns (RegistrationGetResponse);
}

message DiscoveryRequest {}

message DiscoveryResponse {
  IssuerMeta meta = 1;
}

message JwksRequest {}

message JwksResponse {
  repeated Jwk keys = 1 [json_name = "keys"];
}

message AuthorizationRequest {
  map<string, string> sessions = 1;
  string content_type = 2;
  string method = 3;
  string url = 4;
  string form = 5;
}

message AuthorizationResponse {
  oneof authorization_response_oneof {
    AuthorizationFailResponse fail = 1;
    AuthorizationNextActionLogin login = 2;
    AuthorizationNextActionIssue issue = 3;
    AuthorizationRedirectResponse redirect = 4;
    AuthorizationHtmlResponse html = 5;
  }
  AuthorizationParameters params = 10;
  ClientMeta client = 11;
  ClientAttribute client_attribute = 12;
}

message AuthorizationIssueRequest {
  string request_id = 1;
  string session_id = 2;
  string subject = 3;
  string claims = 4;
}

message AuthorizationIssueResponse {
  oneof authorization_issue_response_oneof {
    AuthorizationRedirectResponse redirect = 1;
    AuthorizationHtmlResponse html = 2;
  }
}

message AuthorizationCancelRequest {
  string request_id = 1;
}

message AuthorizationCancelResponse {
  oneof authorization_cancel_response_oneof {
    AuthorizationRedirectResponse redirect = 1;
    AuthorizationHtmlResponse html = 2;
  }
}

message StartSessionRequest {
  string subject = 1;
  string request_id = 2;
}

message StartSessionResponse {
  string name = 1;
  string value = 2;
}

message TokenRequest {
  BasicAuth basic_auth = 1;
  string content_type = 2;
  string method = 3;
  string form = 4;
  string tls_client_certificate = 5;
}

message TokenResponse {
  oneof token_response_oneof {
    TokenSuccessResponse success = 1;
    TokenFailResponse fail = 2;
  }
}

message UserinfoRequest {
  string authorization = 1;
  string content_type = 2;
  string method = 3;
  string form = 4;
  string tls_client_certificate = 5;
}

message UserinfoResponse {
  map<string, string> headers = 1;
  int32 status_code = 2;
  string body = 3;
}

message RequestRequest {
  string request_id = 1;
}

message RequestResponse {
  ClientMeta client = 1;
  AuthorizationParameters auth_params = 2;
}

message AuthorizationFailResponse {
  int32 status_code = 1;
  AuthorizationErrorResponse error = 2;
}

// https://openid.net/specs/openid-connect-core-1_0.html#AuthError
message AuthorizationErrorResponse {
  string error = 1;
  string error_description = 2;
  string error_uri = 3;
  string state = 4;
}

message AuthorizationNextActionLogin {
  string request_id = 1;
  ClientMeta client = 2;
  AuthorizationParameters auth_params = 3;
}

message AuthorizationNextActionIssue {
  string request_id = 1;
  string session_id = 2;
  string subject = 3;
  ClientMeta client = 4;
  AuthorizationParameters auth_params = 5;
}

message AuthorizationRedirectResponse {
  string url = 1;
}

message AuthorizationHtmlResponse {
  string content = 1;
}

message TokenSuccessResponse {
  // https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1
  string access_token = 1 [json_name = "access_token"];
  string token_type = 2 [json_name = "token_type"];
  int64 expires_in = 3 [json_name = "expires_in"];
  string refresh_token = 4 [json_name = "refresh_token"];
  string scope = 5 [json_name = "scope"];
  // https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
  string id_token = 6 [json_name = "id_token"];
}

message TokenFailResponse {
  int32 status_code = 1;
  OauthError error = 2;
}

message OauthError {
  // https://www.rfc-editor.org/rfc/rfc6749.html#section-5.2
  string error = 1 [json_name = "error"];
  string error_description = 2 [json_name = "error_description"];
  string error_uri = 3 [json_name = "error_uri"];
}

message BasicAuth {
  string username = 1;
  string password = 2;
}
